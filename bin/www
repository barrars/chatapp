#!/usr/bin/env node
const logger = require('../routes/myLogger')
function onListening () {
  var addr = server.address()
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port
  debug('Listening on ' + bind)

  // logger.log(`goodJob! Port at http://localhost:${port}`)
}
require('./myIP')
const socket = require('../routes/sockets').io()
var app = require('../app')
var debug = require('debug')('awesome-chat:server')
var http = require('http')
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001')

app.set('port', port)
app.enable('trust proxy')

/**
 * Create HTTP server.
 */

var server = http.createServer(app)

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port)
server.on('error', onError)
server.on('listening', onListening)
socket.listen(server)
// process.once('SIGUSR2', function () {
//   server.close(function () {
//     process.kill(process.pid, 'SIGUSR2')
//   })
// })
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort (val) {
  var port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError (error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      logger.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      logger.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
